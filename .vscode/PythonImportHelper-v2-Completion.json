[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "_rate_limit_exceeded_handler",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RateLimitExceeded",
        "importPath": "slowapi.errors",
        "description": "slowapi.errors",
        "isExtraImport": true,
        "detail": "slowapi.errors",
        "documentation": {}
    },
    {
        "label": "SlowAPIMiddleware",
        "importPath": "slowapi.middleware",
        "description": "slowapi.middleware",
        "isExtraImport": true,
        "detail": "slowapi.middleware",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "ValueErrorr",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class ValueErrorr(HTTPException):\n    def __init__(self, status_code=status.HTTP_400_BAD_REQUEST, detail = None):\n        super().__init__(status_code, detail)\nclass UnauthorizedKey(HTTPException):\n    def __init__(self, status_code=status.HTTP_401_UNAUTHORIZED, detail = None):\n        super().__init__(status_code, detail)\n#config creation exceptions\nclass ConfigCreationException(HTTPException):\n    def __init__(self, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail = \"Something went wrong\"):\n        super().__init__(status_code, detail)",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedKey",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class UnauthorizedKey(HTTPException):\n    def __init__(self, status_code=status.HTTP_401_UNAUTHORIZED, detail = None):\n        super().__init__(status_code, detail)\n#config creation exceptions\nclass ConfigCreationException(HTTPException):\n    def __init__(self, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail = \"Something went wrong\"):\n        super().__init__(status_code, detail)\n#delete config exceptions\nclass DeleteConfigException(HTTPException):\n    def __init__(self, status_code=None, detail = None):",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "ConfigCreationException",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class ConfigCreationException(HTTPException):\n    def __init__(self, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail = \"Something went wrong\"):\n        super().__init__(status_code, detail)\n#delete config exceptions\nclass DeleteConfigException(HTTPException):\n    def __init__(self, status_code=None, detail = None):\n        super().__init__(status_code, detail)\n#add client exceptions\nclass AddClientexception(HTTPException):\n    def __init__(self, status_code=None, detail = None):",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "DeleteConfigException",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class DeleteConfigException(HTTPException):\n    def __init__(self, status_code=None, detail = None):\n        super().__init__(status_code, detail)\n#add client exceptions\nclass AddClientexception(HTTPException):\n    def __init__(self, status_code=None, detail = None):\n        super().__init__(status_code, detail)",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "AddClientexception",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class AddClientexception(HTTPException):\n    def __init__(self, status_code=None, detail = None):\n        super().__init__(status_code, detail)",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "get_user_repo",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def get_user_repo(key,db:Client):\n    querry = db.table(\"users\").select(\"*\").eq(\"key\",key[\"login_key\"])\n    result = querry.execute()\n    if len(result.data) == 0:\n        return None\n    else:\n        return result.data[0]\n#create config on db\ndef create_config_repo(config,db:Client):\n    query = db.table(\"configs\").insert(config)",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "create_config_repo",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def create_config_repo(config,db:Client):\n    query = db.table(\"configs\").insert(config)\n    result = query.execute()\n    if len(result.data) > 0:\n        #succussfully added data\n        return True\n    else:\n        return False\n#get all configs on db\ndef get_configs_repo(db:Client):",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "get_configs_repo",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def get_configs_repo(db:Client):\n    quesry = db.table(\"configs\").select(\"*\")\n    result = quesry.execute()\n    return result\n#check config availability based on id\ndef check_config_repo_by_id(id,db:Client):\n    q = db.table(\"configs\").select(\"\").eq(\"id\",id)\n    result = q.execute()\n    if len(result.data) == 0:\n        return None",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "check_config_repo_by_id",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def check_config_repo_by_id(id,db:Client):\n    q = db.table(\"configs\").select(\"\").eq(\"id\",id)\n    result = q.execute()\n    if len(result.data) == 0:\n        return None\n    else:\n        return True\n#delete config based on id\ndef delete_config_based_on_id(id,db:Client):\n    q = db.table(\"configs\").delete().eq(\"id\",id)",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "delete_config_based_on_id",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def delete_config_based_on_id(id,db:Client):\n    q = db.table(\"configs\").delete().eq(\"id\",id)\n    result = q.execute()\n    if len(result.data) == 0:\n        return None\n    else:\n        return True\n#get client based on name\ndef getcliet_based_on_name(name,db:Client):\n    q = db.table(\"users\").select(\"*\").eq(\"name\",name[\"client_name\"])",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "getcliet_based_on_name",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def getcliet_based_on_name(name,db:Client):\n    q = db.table(\"users\").select(\"*\").eq(\"name\",name[\"client_name\"])\n    result = q.execute()\n    if len(result.data) == 0:\n        return True\n    return False\n#add client to the system\ndef add_client_to_system(client,db:Client):\n    q = db.table(\"users\").insert({\"name\":client[\"client_name\"],\"key\":client[\"key\"]})\n    result = q.execute()",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "add_client_to_system",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def add_client_to_system(client,db:Client):\n    q = db.table(\"users\").insert({\"name\":client[\"client_name\"],\"key\":client[\"key\"]})\n    result = q.execute()\n    if len(result.data) == 0:\n        return False\n    return True",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "user_login",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details\n    if result is None:\n        raise ValueErrorr(detail=\"Something went wrong while validating key\")\n    return result\n#=====================user routes===========================================\n#get all available configs\n@user_router.get(\"/\")",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "get_configs",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def get_configs(request:Request,db:Annotated[Client,Depends(get_db)]):\n    pass\n    #pass request to service layer\n    result = get_configs_service(db=db)\n    if result:\n        return response(message=\"Configs fetch done\",data=result.data)\n    return response(message=\"No any available configs\")\n#=====================admin routes===========================================\n#add config to the system\n@admin_router.post(\"/\")",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "create_config",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def create_config(request:Request,config:ConfigCreateSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass config data to service layer\n    result = create_config_service(config=config.model_dump(),db=db)\n    if result:\n        return response(message=\"Config creation succuss!!\",data=None)\n    raise ConfigCreationException()\n#get all available configs\n@admin_router.get(\"/\")\n@limiter.limit(\"30/minute\")\ndef get_configs(request:Request,db:Annotated[Client,Depends(get_db)]):",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "get_configs",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def get_configs(request:Request,db:Annotated[Client,Depends(get_db)]):\n    pass\n    #pass request to service layer\n    result = get_configs_service(db=db)\n    if result:\n        return response(message=\"Configs fetch done\",data=result.data)\n    return response(message=\"No any available configs\")\n#delete specific config from the system\n@admin_router.delete(\"/:id\")\n@limiter.limit(\"30/minute\")",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "delete_configs",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def delete_configs(request:Request,id:str,db:Annotated[Client,Depends(get_db)]):\n    result = delete_config_service(id,db)\n    if result:\n        return response(message=\"Config deleted!\",data=None)\n    raise DeleteConfigException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,detail=\"Something went wrong while deleting the config!\")\n#add new user to the system\n@admin_router.post(\"/add-client\")\n@limiter.limit(\"2/minute\")\ndef add_client(request:Request,client_name:AddNewClientSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the client name to service layer",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "add_client",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def add_client(request:Request,client_name:AddNewClientSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the client name to service layer\n    result = add_new_client_service(client_name.model_dump(),db)\n    pass",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "auth_router = APIRouter(tags=[\"login\"])\nadmin_router = APIRouter(tags=[\"admin\"])\nuser_router = APIRouter(tags=[\"user\"])\n#login endpoint to both user and admin\n@auth_router.post(\"/login\")\n@limiter.limit(\"5/minute\")\ndef user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "admin_router",
        "kind": 5,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "admin_router = APIRouter(tags=[\"admin\"])\nuser_router = APIRouter(tags=[\"user\"])\n#login endpoint to both user and admin\n@auth_router.post(\"/login\")\n@limiter.limit(\"5/minute\")\ndef user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details\n    if result is None:",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "user_router = APIRouter(tags=[\"user\"])\n#login endpoint to both user and admin\n@auth_router.post(\"/login\")\n@limiter.limit(\"5/minute\")\ndef user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details\n    if result is None:\n        raise ValueErrorr(detail=\"Something went wrong while validating key\")",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class response(BaseModel):\n    succuss:bool = Field(default=True)\n    message:str\n    data : Any\n#Schema for the login data\nclass LoginInputSchema(BaseModel):\n    login_key : str \n    @field_validator(\"login_key\")\n    @classmethod\n    def validate_login_key(cls,v):",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "LoginInputSchema",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class LoginInputSchema(BaseModel):\n    login_key : str \n    @field_validator(\"login_key\")\n    @classmethod\n    def validate_login_key(cls,v):\n        if len(v) == 0:\n            raise ValueErrorr(detail=\"Login key cannot be empty\")\n        if len(v) < 8:\n            raise ValueErrorr(detail=\"Seems to be a invalid login key\")\n        return v",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "ConfigCreateSchema",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class ConfigCreateSchema(BaseModel):\n    config_name : str = Field(...,examples=[\"Airtel\"])\n    config : str = Field(...,examples=[\"vless:://.....\"])\n#schema for adding new client to the system\nclass AddNewClientSchema(BaseModel):\n    client_name:str = Field(...,examples=[\"Dumidu\"])",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "AddNewClientSchema",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class AddNewClientSchema(BaseModel):\n    client_name:str = Field(...,examples=[\"Dumidu\"])",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "login_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def login_service(key,db):\n    #check the key in database\n    result = get_user_repo(key=key,db=db)\n    if result is None:\n        #user not have invalid key situation\n        raise UnauthorizedKey(detail=\"This is not a valid key\")\n    else:\n        #user valid return the name and user type\n        return {\n            \"name\":result[\"name\"],",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "create_config_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def create_config_service(config,db):\n    #pass the data to repo layer\n    result = create_config_repo(config,db)\n    return result\n#get all configs\ndef get_configs_service(db):\n    result = get_configs_repo(db=db)\n    if len(result.data) == 0:\n        return None\n    return result",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "get_configs_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def get_configs_service(db):\n    result = get_configs_repo(db=db)\n    if len(result.data) == 0:\n        return None\n    return result\n#delete specific config\ndef delete_config_service(id,db):\n    #check id is a valid id \n    try:\n        id = uuid.UUID(id)",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "delete_config_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def delete_config_service(id,db):\n    #check id is a valid id \n    try:\n        id = uuid.UUID(id)\n    except ValueError:\n        raise DeleteConfigException(status_code=status.HTTP_400_BAD_REQUEST,detail=\"Malforemed config id.\")\n    #first check that id exists on the database\n    result = check_config_repo_by_id(id=id,db=db)\n    #if available then delete it\n    if result:",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "add_new_client_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def add_new_client_service(client_name,db):\n    #check that client already exists\n    result = getcliet_based_on_name(client_name,db=db)\n    if result is False:\n        raise AddClientexception(status_code=status.HTTP_404_NOT_FOUND,detail=\"User already exists\")\n    #genarate key for the client\n    key = uuid.uuid4().hex.upper()[0:6]\n    client_name[\"key\"] = key\n    #add client to the system\n    result = add_client_to_system(client=client_name,db=db)",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "api.user.utils",
        "description": "api.user.utils",
        "peekOfCode": "def send_sms(key:str,name:str):\n    params = {\n\t\"recipient\":f\"94{ADMIN_NUMBER}\",\n\t\"sender_id\":SENDER_ID,\n\t\"type\":\"plain\",\n\t\"message\":f\"TOKEN FOR {name} - {key}\",\n    }\n    headers = {\n        \"Authorization\": f\"Bearer {API_TOKEN}\",\n        \"Content-Type\" : \"application/json\",",
        "detail": "api.user.utils",
        "documentation": {}
    },
    {
        "label": "ADMIN_NUMBER",
        "kind": 5,
        "importPath": "api.user.utils",
        "description": "api.user.utils",
        "peekOfCode": "ADMIN_NUMBER = settings.ADMIN_MOBILE\nBASE_URL = settings.BASE_URL\nAPI_TOKEN = settings.API_TOKEN\nSENDER_ID = settings.SENDER_ID\nURL_PATH = \"api/v3/sms/send\"\n#send sms function\ndef send_sms(key:str,name:str):\n    params = {\n\t\"recipient\":f\"94{ADMIN_NUMBER}\",\n\t\"sender_id\":SENDER_ID,",
        "detail": "api.user.utils",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "api.user.utils",
        "description": "api.user.utils",
        "peekOfCode": "BASE_URL = settings.BASE_URL\nAPI_TOKEN = settings.API_TOKEN\nSENDER_ID = settings.SENDER_ID\nURL_PATH = \"api/v3/sms/send\"\n#send sms function\ndef send_sms(key:str,name:str):\n    params = {\n\t\"recipient\":f\"94{ADMIN_NUMBER}\",\n\t\"sender_id\":SENDER_ID,\n\t\"type\":\"plain\",",
        "detail": "api.user.utils",
        "documentation": {}
    },
    {
        "label": "API_TOKEN",
        "kind": 5,
        "importPath": "api.user.utils",
        "description": "api.user.utils",
        "peekOfCode": "API_TOKEN = settings.API_TOKEN\nSENDER_ID = settings.SENDER_ID\nURL_PATH = \"api/v3/sms/send\"\n#send sms function\ndef send_sms(key:str,name:str):\n    params = {\n\t\"recipient\":f\"94{ADMIN_NUMBER}\",\n\t\"sender_id\":SENDER_ID,\n\t\"type\":\"plain\",\n\t\"message\":f\"TOKEN FOR {name} - {key}\",",
        "detail": "api.user.utils",
        "documentation": {}
    },
    {
        "label": "SENDER_ID",
        "kind": 5,
        "importPath": "api.user.utils",
        "description": "api.user.utils",
        "peekOfCode": "SENDER_ID = settings.SENDER_ID\nURL_PATH = \"api/v3/sms/send\"\n#send sms function\ndef send_sms(key:str,name:str):\n    params = {\n\t\"recipient\":f\"94{ADMIN_NUMBER}\",\n\t\"sender_id\":SENDER_ID,\n\t\"type\":\"plain\",\n\t\"message\":f\"TOKEN FOR {name} - {key}\",\n    }",
        "detail": "api.user.utils",
        "documentation": {}
    },
    {
        "label": "URL_PATH",
        "kind": 5,
        "importPath": "api.user.utils",
        "description": "api.user.utils",
        "peekOfCode": "URL_PATH = \"api/v3/sms/send\"\n#send sms function\ndef send_sms(key:str,name:str):\n    params = {\n\t\"recipient\":f\"94{ADMIN_NUMBER}\",\n\t\"sender_id\":SENDER_ID,\n\t\"type\":\"plain\",\n\t\"message\":f\"TOKEN FOR {name} - {key}\",\n    }\n    headers = {",
        "detail": "api.user.utils",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "api.db",
        "description": "api.db",
        "peekOfCode": "def get_db():\n    try:\n        yield supabase\n    finally:\n        pass",
        "detail": "api.db",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "api.settings",
        "description": "api.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    SUPABASE_URL :str =  config(\"SUPABASE_URL\")\n    SUPABASE_KEY :str = config(\"SUPABASE_KEY\")\n    ADMIN_MOBILE : str = config(\"ADMIN_MOBILE\")\n    BASE_URL : str = config(\"BASE_URL\")\n    API_TOKEN :str = config(\"API_TOKEN\")\n    SENDER_ID :str = config(\"SENDER_ID\")\nsettings = Settings()",
        "detail": "api.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "api.settings",
        "description": "api.settings",
        "peekOfCode": "settings = Settings()",
        "detail": "api.settings",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "limiter",
        "description": "limiter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)",
        "detail": "limiter",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app = FastAPI()\n# Add SlowAPI middleware\napp.add_middleware(SlowAPIMiddleware)\n#rate limiter handler\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n#include user based routes\napp.include_router(prefix=\"/api/v1/auth\",router=auth_router)\napp.include_router(prefix=\"/api/v1/admin\",router=admin_router)\napp.include_router(prefix=\"/api/v1/user\",router=user_router)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app.state.limiter",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n#include user based routes\napp.include_router(prefix=\"/api/v1/auth\",router=auth_router)\napp.include_router(prefix=\"/api/v1/admin\",router=admin_router)\napp.include_router(prefix=\"/api/v1/user\",router=user_router)\n@app.exception_handler(HTTPException)\nasync def exception_handler(request:Request,exc:HTTPException):\n    return JSONResponse(\n        status_code=exc.status_code,",
        "detail": "server",
        "documentation": {}
    }
]