[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "supabase",
        "description": "supabase",
        "isExtraImport": true,
        "detail": "supabase",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Limiter",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "_rate_limit_exceeded_handler",
        "importPath": "slowapi",
        "description": "slowapi",
        "isExtraImport": true,
        "detail": "slowapi",
        "documentation": {}
    },
    {
        "label": "get_remote_address",
        "importPath": "slowapi.util",
        "description": "slowapi.util",
        "isExtraImport": true,
        "detail": "slowapi.util",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RateLimitExceeded",
        "importPath": "slowapi.errors",
        "description": "slowapi.errors",
        "isExtraImport": true,
        "detail": "slowapi.errors",
        "documentation": {}
    },
    {
        "label": "SlowAPIMiddleware",
        "importPath": "slowapi.middleware",
        "description": "slowapi.middleware",
        "isExtraImport": true,
        "detail": "slowapi.middleware",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"backup-config-system\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.13/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "ValueErrorr",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class ValueErrorr(HTTPException):\n    def __init__(self, status_code=status.HTTP_400_BAD_REQUEST, detail = None):\n        super().__init__(status_code, detail)\nclass UnauthorizedKey(HTTPException):\n    def __init__(self, status_code=status.HTTP_401_UNAUTHORIZED, detail = None):\n        super().__init__(status_code, detail)\n#config creation exceptions\nclass ConfigCreationException(HTTPException):\n    def __init__(self, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail = \"Something went wrong\"):\n        super().__init__(status_code, detail)",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedKey",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class UnauthorizedKey(HTTPException):\n    def __init__(self, status_code=status.HTTP_401_UNAUTHORIZED, detail = None):\n        super().__init__(status_code, detail)\n#config creation exceptions\nclass ConfigCreationException(HTTPException):\n    def __init__(self, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail = \"Something went wrong\"):\n        super().__init__(status_code, detail)",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "ConfigCreationException",
        "kind": 6,
        "importPath": "api.user.exceptions",
        "description": "api.user.exceptions",
        "peekOfCode": "class ConfigCreationException(HTTPException):\n    def __init__(self, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail = \"Something went wrong\"):\n        super().__init__(status_code, detail)",
        "detail": "api.user.exceptions",
        "documentation": {}
    },
    {
        "label": "get_user_repo",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def get_user_repo(key,db:Client):\n    querry = db.table(\"users\").select(\"*\").eq(\"key\",key[\"login_key\"])\n    result = querry.execute()\n    if len(result.data) == 0:\n        return None\n    else:\n        return result.data[0]\n#create config on db\ndef create_config_repo(config,db:Client):\n    query = db.table(\"configs\").insert(config)",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "create_config_repo",
        "kind": 2,
        "importPath": "api.user.repo",
        "description": "api.user.repo",
        "peekOfCode": "def create_config_repo(config,db:Client):\n    query = db.table(\"configs\").insert(config)\n    result = query.execute()\n    if len(result.data) > 0:\n        #succussfully added data\n        return True\n    else:\n        return False",
        "detail": "api.user.repo",
        "documentation": {}
    },
    {
        "label": "user_login",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details\n    if result is None:\n        raise ValueErrorr(detail=\"Something went wrong while validating key\")\n    return result\n#=====================admin routes===========================================\n#add config to the system\n@admin_router.post(\"/\")",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "create_config",
        "kind": 2,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "def create_config(request:Request,config:ConfigCreateSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass config data to service layer\n    result = create_config_service(config=config.model_dump(),db=db)\n    if result:\n        return response(message=\"Config creation succuss!!\")\n    raise ConfigCreationException()",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "auth_router = APIRouter(tags=[\"login\"])\nadmin_router = APIRouter(tags=[\"admin\"])\n#login endpoint to both user and admin\n@auth_router.post(\"/login\")\n@limiter.limit(\"5/minute\")\ndef user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details\n    if result is None:",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "admin_router",
        "kind": 5,
        "importPath": "api.user.routes",
        "description": "api.user.routes",
        "peekOfCode": "admin_router = APIRouter(tags=[\"admin\"])\n#login endpoint to both user and admin\n@auth_router.post(\"/login\")\n@limiter.limit(\"5/minute\")\ndef user_login(request:Request,login_key:LoginInputSchema,db:Annotated[Client,Depends(get_db)]):\n    #pass the key into service layer\n    result = login_service(login_key.model_dump(),db)\n    #return the details\n    if result is None:\n        raise ValueErrorr(detail=\"Something went wrong while validating key\")",
        "detail": "api.user.routes",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class response(BaseModel):\n    succuss:bool = Field(default=True)\n    message:str\n#Schema for the login data\nclass LoginInputSchema(BaseModel):\n    login_key : str \n    @field_validator(\"login_key\")\n    @classmethod\n    def validate_login_key(cls,v):\n        if len(v) == 0:",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "LoginInputSchema",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class LoginInputSchema(BaseModel):\n    login_key : str \n    @field_validator(\"login_key\")\n    @classmethod\n    def validate_login_key(cls,v):\n        if len(v) == 0:\n            raise ValueErrorr(detail=\"Login key cannot be empty\")\n        if len(v) < 8:\n            raise ValueErrorr(detail=\"Seems to be a invalid login key\")\n        return v",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "ConfigCreateSchema",
        "kind": 6,
        "importPath": "api.user.schemas",
        "description": "api.user.schemas",
        "peekOfCode": "class ConfigCreateSchema(BaseModel):\n    config_name : str = Field(...,examples=[\"Airtel\"])\n    config : str = Field(...,examples=[\"vless:://.....\"])",
        "detail": "api.user.schemas",
        "documentation": {}
    },
    {
        "label": "login_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def login_service(key,db):\n    #check the key in database\n    result = get_user_repo(key=key,db=db)\n    if result is None:\n        #user not have invalid key situation\n        raise UnauthorizedKey(detail=\"This is not a valid key\")\n    else:\n        #user valid return the name and user type\n        return {\n            \"name\":result[\"name\"],",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "create_config_service",
        "kind": 2,
        "importPath": "api.user.services",
        "description": "api.user.services",
        "peekOfCode": "def create_config_service(config,db):\n    #pass the data to repo layer\n    result = create_config_repo(config,db)\n    return result",
        "detail": "api.user.services",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "api.db",
        "description": "api.db",
        "peekOfCode": "def get_db():\n    try:\n        yield supabase\n    finally:\n        pass",
        "detail": "api.db",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "api.settings",
        "description": "api.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    SUPABASE_URL :str =  config(\"SUPABASE_URL\")\n    SUPABASE_KEY :str = config(\"SUPABASE_KEY\")\nsettings = Settings()",
        "detail": "api.settings",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "api.settings",
        "description": "api.settings",
        "peekOfCode": "settings = Settings()",
        "detail": "api.settings",
        "documentation": {}
    },
    {
        "label": "limiter",
        "kind": 5,
        "importPath": "limiter",
        "description": "limiter",
        "peekOfCode": "limiter = Limiter(key_func=get_remote_address)",
        "detail": "limiter",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app = FastAPI()\n# Add SlowAPI middleware\napp.add_middleware(SlowAPIMiddleware)\n#rate limiter handler\napp.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n#include user based routes\napp.include_router(prefix=\"/api/v1/auth\",router=auth_router)\napp.include_router(prefix=\"/api/v1/admin\",router=admin_router)\n@app.exception_handler(HTTPException)",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app.state.limiter",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app.state.limiter = limiter\napp.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)\n#include user based routes\napp.include_router(prefix=\"/api/v1/auth\",router=auth_router)\napp.include_router(prefix=\"/api/v1/admin\",router=admin_router)\n@app.exception_handler(HTTPException)\nasync def exception_handler(request:Request,exc:HTTPException):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"detail\" : exc.detail}",
        "detail": "server",
        "documentation": {}
    }
]